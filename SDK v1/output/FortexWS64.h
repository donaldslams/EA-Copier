/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "fortexws.go"

#include "FortexDefs.h"

#line 1 "cgo-generated-wrapper"

#line 3 "bridge_polling.go"

#include <string.h>
#include "FortexDefs.h"

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// Init initializes the Fortex client.
// args
// - address: the Fortex server address.
// - msgRecvType: the message receive type.1: callback, 2: polling.
// - devMode: whether to run in development mode.
//
extern __declspec(dllexport) void Init(char* address, int msgRecvType);

// HighWaterMark sets the high water mark.
// args
// - value: the high water mark.
//
extern __declspec(dllexport) void HighWaterMark(int value);

// GetLastErrorMessage returns the last error message.
// return
// - error: the last error message.
//
extern __declspec(dllexport) char* GetLastErrorMessage();

// GetState returns the state of the Fortex client.
// return
// - state: the state of the Fortex client.
//
extern __declspec(dllexport) int GetState();

// Connect establishes a connection to the Fortex server.
//
extern __declspec(dllexport) int Connect();

// Login logs in to the Fortex server.
// args
// - apiKey: the API key.
// - password: the password.
// return
// - error: any error that occurred during login.
//
extern __declspec(dllexport) int Login(char* apiKey, char* password);

// Logout logs out of the Fortex server.
//
extern __declspec(dllexport) void Logout();

// GetCurrentUser gets the current user.
// return
// - user: the current user.
//
extern __declspec(dllexport) char* GetCurrentUser();

// QuerySymbolInfo queries the symbol information.
// args
// - sym: the symbol to query.
// - mdType: the market data type.
// - isUnsubscribe: whether to unsubscribe.
// return
// - error: any error that occurred during query.
//
extern __declspec(dllexport) int SubscribeMarketData(Symbol sym, int mdType, int isUnsubscribe);

// SubscribeMarketDataEx subscribes the market data with index and name.
// args
// - index: the index of the symbol.
// - symName: the name of the symbol.
// - mdType: the market data type.
// - isUnsubscribe: whether to unsubscribe.
// return
// - error: any error that occurred during subscribe.
//
extern __declspec(dllexport) int SubscribeMarketDataEx(int index, char* symName, int mdType, int isUnsubscribe);

// QueryEvents queries the events.
// args
// - acc: the account to query.
// - fromTime: the start time of the events.
// - toTime: the end time of the events.
// - types: the types of the events.
// - typesCount: the count of the types.
// return
// - error: any error that occurred during query.
//
extern __declspec(dllexport) int QueryEvents(char* acc, char* fromTime, char* toTime, char** types, int typesCount);

// QueryTradeHistory queries the trade history.
// args
// - req: the trade history request.
// return
// - error: any error that occurred during query.
//
extern __declspec(dllexport) int QueryTradeHistory(TradeHistoryRequest req);

// QueryChart queries the chart.
// args
// - req: the chart request.
// return
// - error: any error that occurred during query.
//
extern __declspec(dllexport) int QueryChart(ChartRequest req);

// PlaceMarketOrder places a market order.
// args
// - acct: the account to place the order.
// - side: the side of the order.
// - qty: the quantity of the order.
// - sym: the symbol of the order.
// return
// - error: any error that occurred during place order.
//
extern __declspec(dllexport) int PlaceMarketOrder(char* acct, int side, double qty, Symbol sym);

// PlaceMarketOrderEx places a market order witt name.
// args
// - acct: the account to place the order.
// - side: the side of the order.
// - qty: the quantity of the order.
// - symName: the name of the symbol.
// - secType: the security type.
// return
// - error: any error that occurred during place order.
//
extern __declspec(dllexport) int PlaceMarketOrderEx(char* acct, int side, double qty, char* symName, int secType);

// PlaceLimitOrder places a limit order.
// args
// - acct: the account to place the order.
// - side: the side of the order.
// - qty: the quantity of the order.
// - sym: the symbol of the order.
// - limitPx: the limit price of the order.
// return
// - error: any error that occurred during place order.
//
extern __declspec(dllexport) int PlaceLimitOrder(char* acct, int side, double qty, Symbol sym, double limitPx);

// PlaceLimitOrderEx places a limit order with name.
// args
// - acct: the account to place the order.
// - side: the side of the order.
// - qty: the quantity of the order.
// - symName: the name of the symbol.
// - secType: the security type.
// - limitPx: the limit price of the order.
// return
// - error: any error that occurred during place order.
//
extern __declspec(dllexport) int PlaceLimitOrderEx(char* acct, int side, double qty, char* symName, int secType, double limitPx);

// PlaceStopOrder places a stop order.
// args
// - acct: the account to place the order.
// - side: the side of the order.
// - qty: the quantity of the order.
// - sym: the symbol of the order.
// - stopPx: the stop price of the order.
// return
// - error: any error that occurred during place order.
//
extern __declspec(dllexport) int PlaceStopOrder(char* acct, int side, double qty, Symbol sym, double stopPx);

// PlaceStopOrderEx places a stop order with name.
// args
// - acct: the account to place the order.
// - side: the side of the order.
// - qty: the quantity of the order.
// - symName: the name of the symbol.
// - secType: the security type.
// - stopPx: the stop price of the order.
// return
// - error: any error that occurred during place order.
//
extern __declspec(dllexport) int PlaceStopOrderEx(char* acct, int side, double qty, char* symName, int secType, double stopPx);

// PlaceThresholdOrder places a threshold order.
// args
// - acct: the account to place the order.
// - side: the side of the order.
// - qty: the quantity of the order.
// - sym: the symbol of the order.
// - upperBoundPx: the upper bound price of the order.
// - lowerBoundPx: the lower bound price of the order.
// return
// - error: any error that occurred during place order.
//
extern __declspec(dllexport) int PlaceThresholdOrder(char* acct, int side, double qty, Symbol sym, double upperBoundPx, double lowerBoundPx);

// PlaceThresholdOrderEx places a threshold order with name.
// args
// - acct: the account to place the order.
// - side: the side of the order.
// - qty: the quantity of the order.
// - symName: the name of the symbol.
// - secType: the security type.
// - upperBoundPx: the upper bound price of the order.
// - lowerBoundPx: the lower bound price of the order.
// return
// - error: any error that occurred during place order.
//
extern __declspec(dllexport) int PlaceThresholdOrderEx(char* acct, int side, double qty, char* symName, int secType, double upperBoundPx, double lowerBoundPx);

// CancelOrder cancels an order.
// args
// - acct: the account to cancel the order.
// - origOrdUser: the original order user.
// - origOrdClOrder: the original order client order id.
// - origOrdType: the original order type.
// - origOrdSide: the original order side.
// - origOrdQty: the original order quantity.
// - origOrdSym: the original order symbol.
// - origOrExecDest: the original order execution destination.
// - origOrdTag: the original order tag.
// - tif: the time in force.
// return
// - error: any error that occurred during cancel order.
//
extern __declspec(dllexport) int CancelOrder(char* acct, char* origOrdUser, char* origOrdClOrder, int origOrdType, int origOrdSide, double origOrdQty, Symbol* origOrdSym, char* origOrExecDest, char* origOrdTag, int tif);

// CancelOrderEx cancels an order with name.
// args
// - acct: the account to cancel the order.
// - origOrdUser: the original order user.
// - origOrdClOrder: the original order client order id.
// - origOrdType: the original order type.
// - origOrdSide: the original order side.
// - origOrdQty: the original order quantity.
// - symName: the name of the symbol.
// - secType: the security type.
// - origOrExecDest: the original order execution destination.
// - origOrdTag: the original order tag.
// - tif: the time in force.
// return
// - error: any error that occurred during cancel order.
//
extern __declspec(dllexport) int CancelOrderEx(char* acct, char* origOrdUser, char* origOrdClOrder, int origOrdType, int origOrdSide, double origOrdQty, char* symName, int secType, char* origOrExecDest, char* origOrdTag, int tif);

// ModifyOrder modifies an order.
// args
// - acct: the account to modify the order.
// - ord: the order to modify.
// return
// - error: any error that occurred during modify order.
//
extern __declspec(dllexport) int ModifyOrder(char* acct, Order ord);

// EnterDoneawayTrade enters a doneaway trade.
//
// args
// - acct: the account.
// - symName: the symbol name.
// - direction: only valid for ticket mode, options: ToOpen, ToClose, Aggregate
// - refTktNo: only valid for ticket mode, the ticket number.
// - side: options: Buy, Sell
// - qty: the quantity.
// - px: the price.
// return
// - error: any error that occurred during enter doneaway trade.
//
extern __declspec(dllexport) int EnterDoneawayTrade(char* acct, char* symName, int direction, char* refTktNo, int side, double qty, double px);

/*============================================================================*/
// The following functions are used to register event callbacks.
//
extern __declspec(dllexport) void RegisterEventInitSequence(CBInitSequence cb);
extern __declspec(dllexport) void RegisterEventAccountInfo(CBAccountInfo cb);
extern __declspec(dllexport) void RegisterEventLogin(CBLogin cb);
extern __declspec(dllexport) void RegisterEventLogout(CBLogout cb);
extern __declspec(dllexport) void RegisterEventSymbolList(CBSymbolInfo cb);
extern __declspec(dllexport) void RegisterEventMarketData(CBMarketData cb);
extern __declspec(dllexport) void RegisterEventNetPosition(CBNetPosition cb);
extern __declspec(dllexport) void RegisterEventOpenOrder(CBOpenOrder cb);
extern __declspec(dllexport) void RegisterEventNetTicket(CBNetTicket cb);
extern __declspec(dllexport) void RegisterEventTicket(CBTicket cb);
extern __declspec(dllexport) void RegisterEventExecutionReport(CBExecutionReport cb);
extern __declspec(dllexport) void RegisterEventExecutionData(CBExecutionData cb);
extern __declspec(dllexport) void RegisterEventChartData(CBChartData cb);
extern __declspec(dllexport) void RegisterEventTradeHistory(CBTradeHistory cb);
extern __declspec(dllexport) void RegisterEventOrdRejectData(CBOrdRejectData cb);
extern __declspec(dllexport) void RegisterEventRejectData(CBRejectData cb);
extern __declspec(dllexport) void RegisterEventEvent(CBEvent cb);
extern __declspec(dllexport) void RegisterEventCheckWebServer(CBCheckWebServer cb);
extern __declspec(dllexport) void RegisterEventReloginToRest(CBReloginToRest cb);
extern __declspec(dllexport) void RegisterEventDepositeWithdrawn(CBDepositedWithdrawn cb);
extern __declspec(dllexport) void RegisterEventCertRejectData(CBCertRejectData cb);
extern __declspec(dllexport) void ReleaseFortexObject(FortexObject message);

// The following functions are for getting message buffer by polling.
// GetMarketData is called when the bridge needs to get the market data.
// return
// - marketData: the market data.
//
extern __declspec(dllexport) MarketData* GetMarketData();

// GetMessageFromServer is called when the bridge needs to get the message from server.
// return
// - message: the message from server.
//
extern __declspec(dllexport) FortexObject GetMessageFromServer();

// GetMarketDataEx is called when the bridge needs to get the market data.
// return
// - marketData: the market data.
//
extern __declspec(dllexport) int GetMarketDataEx();

// GetMessageFromServerEx is called when the bridge needs to get the message from server.
//
extern __declspec(dllexport) int GetMessageFromServerEx();

// ToInt is called when the bridge needs to get the int value.
//
extern __declspec(dllexport) int ToInt(int index);

// ToInt64 is called when the bridge needs to get the int64 value.
//
extern __declspec(dllexport) char* ToString(int index);

// ToStringEx is called when the bridge needs to get the string value.
//
extern __declspec(dllexport) void ToStringEx(int index, char* buffer, int bufferSize);

// ToDouble is called when the bridge needs to get the double value.
//
extern __declspec(dllexport) double ToDouble(int index);

// ToLongLong is called when the bridge needs to get the long long value.
//
extern __declspec(dllexport) long long int ToLongLong(int index);

// ToFloat is called when the bridge needs to get the float value.
//
extern __declspec(dllexport) float ToFloat(int index);

// PutInt is called when the bridge needs to put the int value.
//
extern __declspec(dllexport) void PutInt(int objType, int index, int val);

// PutString is called when the bridge needs to put the string value.
//
extern __declspec(dllexport) void PutString(int objType, int index, char* val);

// PutDouble is called when the bridge needs to put the double value.
//
extern __declspec(dllexport) void PutDouble(int objType, int index, double val);

// PutLongLong is called when the bridge needs to put the long long value.
//
extern __declspec(dllexport) void PutLongLong(int objType, int index, long long int val);

// PutFloat is called when the bridge needs to put the float value.
//
extern __declspec(dllexport) void PutFloat(int objType, int index, float val);

// ModifyOrderEx is called when the bridge needs to modify the order.
//
// args
// - account: the account.
// return
// - error: any error that occurred during modify order.
//
extern __declspec(dllexport) int ModifyOrderEx(char* account);

#ifdef __cplusplus
}
#endif
